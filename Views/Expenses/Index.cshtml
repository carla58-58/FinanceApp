@model IEnumerable<FinanceApp.Models.Expense>

@{
    ViewData["Title"] = "My Expenses";
}

<div class="container-fluid px-4">
    <!-- Header Section -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h2 class="mb-1">
                        <i class="fas fa-wallet me-2 text-primary"></i>My Expenses
                    </h2>
                    <p class="text-muted mb-0">Track and manage your spending</p>
                </div>
                <a href="/Expenses/Create" class="btn btn-primary btn-lg">
                    <i class="fas fa-plus me-2"></i>Add Expense
                </a>
            </div>
        </div>
    </div>

    <!-- Stats Cards -->
    <div class="row mb-4">
        <div class="col-md-4">
            <div class="card stats-card bg-gradient-primary text-white">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h6 class="card-title mb-1">Total Expenses</h6>
                            <h3 class="mb-0">$@ViewBag.TotalExpenses</h3>
                        </div>
                        <i class="fas fa-dollar-sign fa-2x opacity-75"></i>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card stats-card bg-gradient-success text-white">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h6 class="card-title mb-1">Total Entries</h6>
                            <h3 class="mb-0">@Model.Count()</h3>
                        </div>
                        <i class="fas fa-list fa-2x opacity-75"></i>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card stats-card bg-gradient-info text-white">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h6 class="card-title mb-1">Categories</h6>
                            <h3 class="mb-0">@Model.Select(e => e.Category).Distinct().Count()</h3>
                        </div>
                        <i class="fas fa-tags fa-2x opacity-75"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <!-- Expenses Table -->
        <div class="col-lg-8">
            <div class="card shadow-sm">
                <div class="card-header bg-white">
                    <h5 class="mb-0">
                        <i class="fas fa-table me-2"></i>Recent Expenses
                    </h5>
                </div>
                <div class="card-body p-0">
                    @if (Model.Any())
                    {
                        <div class="table-responsive">
                            <table class="table table-hover mb-0">
                                <thead class="table-light">
                                    <tr>
                                        <th class="border-0 fw-bold">Description</th>
                                        <th class="border-0 fw-bold">Amount</th>
                                        <th class="border-0 fw-bold">Category</th>
                                        <th class="border-0 fw-bold">Date</th>
                                        <th class="border-0 fw-bold text-center">Action</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach(var item in Model.OrderByDescending(e => e.Date))
                                    {
                                        <tr class="expense-row">
                                            <td class="align-middle">
                                                <i class="fas fa-file-alt text-muted me-2"></i>
                                                @item.Description
                                            </td>
                                            <td class="align-middle">
                                                <span class="fw-bold text-success">$@item.Amount.ToString("F2")</span>
                                            </td>
                                            <td class="align-middle">
                                                <span class="badge bg-light text-dark category-badge">
                                                    @GetCategoryIcon(item.Category) @item.Category
                                                </span>
                                            </td>
                                            <td class="align-middle">
                                                <small class="text-muted">
                                                    <i class="fas fa-calendar me-1"></i>
                                                    @item.Date.ToString("MMM dd, yyyy")
                                                </small>
                                            </td>
                                            <td class="align-middle text-center">
                                                <form asp-action="Delete" asp-route-id="@item.Id" method="post" style="display:inline;" 
                                                      onsubmit="return confirm('Are you sure you want to delete this expense?')">
                                                    <button type="submit" class="btn btn-outline-danger btn-sm">
                                                        <i class="fas fa-trash"></i>
                                                    </button>
                                                </form>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-5">
                            <i class="fas fa-receipt fa-3x text-muted mb-3"></i>
                            <h5 class="text-muted">No expenses yet</h5>
                            <p class="text-muted">Start tracking your expenses by adding your first entry</p>
                            <a href="/Expenses/Create" class="btn btn-primary">
                                <i class="fas fa-plus me-2"></i>Add Your First Expense
                            </a>
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Chart Section -->
        <div class="col-lg-4">
            <div class="card shadow-sm">
                <div class="card-header bg-white">
                    <h5 class="mb-0">
                        <i class="fas fa-chart-pie me-2"></i>Spending by Category
                    </h5>
                </div>
                <div class="card-body">
                    @if (Model.Any())
                    {
                        <div class="chart-container">
                            <canvas id="myChart"></canvas>
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-4">
                            <i class="fas fa-chart-pie fa-2x text-muted mb-3"></i>
                            <p class="text-muted">Chart will appear when you add expenses</p>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@functions {
    string GetCategoryIcon(string category)
    {
        return category switch
        {
            "Food & Dining" => "🍽️",
            "Transportation" => "🚗",
            "Shopping" => "🛍️",
            "Entertainment" => "🎬",
            "Bills & Utilities" => "⚡",
            "Healthcare" => "🏥",
            "Education" => "📚",
            "Travel" => "✈️",
            _ => "📦"
        };
    }
}

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

@if (Model.Any())
{
    <script>
        const ctx = document.getElementById('myChart');

        fetch('/Expenses/GetChart')
            .then(response => response.json())
            .then(data => {
                new Chart(ctx, {
                    type: 'doughnut',
                    data: {
                        labels: data.map(d => d.category),
                        datasets: [{
                            data: data.map(d => d.total),
                            backgroundColor: [
                                '#258cfb',
                                '#28a745',
                                '#ffc107',
                                '#dc3545',
                                '#6f42c1',
                                '#20c997',
                                '#fd7e14',
                                '#e83e8c',
                                '#6c757d'
                            ],
                            borderWidth: 0,
                            hoverBorderWidth: 3,
                            hoverBorderColor: '#fff'
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: true,
                        plugins: {
                            legend: {
                                position: 'bottom',
                                labels: {
                                    usePointStyle: true,
                                    pointStyle: 'circle',
                                    padding: 15,
                                    font: {
                                        size: 12
                                    }
                                }
                            },
                            tooltip: {
                                callbacks: {
                                    label: function(context) {
                                        const total = context.dataset.data.reduce((a, b) => a + b, 0);
                                        const percentage = ((context.parsed / total) * 100).toFixed(1);
                                        return `${context.label}: $${context.parsed.toFixed(2)} (${percentage}%)`;
                                    }
                                }
                            }
                        },
                        cutout: '60%'
                    }
                });
            })
            .catch(error => {
                console.error('Error loading chart data:', error);
                document.getElementById('myChart').parentElement.innerHTML = 
                    '<div class="text-center py-4"><i class="fas fa-exclamation-triangle text-warning"></i><p class="text-muted mt-2">Chart data unavailable</p></div>';
            });
    </script>
}